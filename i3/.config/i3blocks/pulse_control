#!/usr/bin/env python
"""
Display and control pulseaudio settings using i3blocks
"""

import sys
import os
from subprocess import run, PIPE
import re
from collections import namedtuple

YELLOW = "#F0DFAF"
RED = "#CC9393"

AUDIO_HIGH_SYMBOL = " "
AUDIO_MED_SYMBOL = " "
AUDIO_MED_THRESHOLD = 70
AUDIO_LOW_SYMBOL = "󰕿 "
AUDIO_LOW_THRESHOLD = 30
AUDIO_MUTED_SYMBOL = "󰝟 "

Sink = namedtuple("Sink", ["id", "name", "volume", "muted", "db"])


def with_colour(string: str, colour: str) -> str:
    """Returns string with pango colour"""
    return f'<span foreground="{colour}">{string}</span>'


def get_sinks() -> tuple[list[Sink], int]:
    """Get sinks, and default sink index."""
    sink_ids = []
    sink_names = []
    sink_volumes = []
    sink_muted = []
    sink_dbs = []
    default_sink_index = 0

    # Get the default sink name first
    default_sink_name = ""
    default_output = run(["pactl", "get-default-sink"], stdout=PIPE, text=True)
    if default_output.returncode == 0:
        default_sink_name = default_output.stdout.strip()

    # Get list of sinks
    pactl_output = run(["pactl", "list", "sinks"], stdout=PIPE)
    if pactl_output.returncode != 0:
        # try starting the daemon
        run(["pulseaudio", "--daemon"])
        pactl_output = run(["pactl", "list", "sinks"], stdout=PIPE)

    current_id = None
    current_sink_idx = -1
    found_name = False

    lines = pactl_output.stdout.decode("utf8").splitlines()
    for i, line in enumerate(lines):
        # Identify start of a sink section
        if match := re.match(r"^Sink #(\d+)$", line):
            current_id = match.group(1)
            sink_ids.append(current_id)
            current_sink_idx += 1
            found_name = False
            continue

        # Check if this is the default sink
        if default_sink_name and "Name:" in line and default_sink_name in line:
            default_sink_index = current_sink_idx

        # Try to get shorter names in order of preference
        if not found_name:
            # First priority: alsa.card_name (what you had before)
            if match := re.match(r'\s+alsa.card_name = "([^"]+)"', line):
                sink_names.append(match.group(1))
                found_name = True
                continue

            # Second priority: device.product.name (often shorter)
            if match := re.match(r'\s+device.product.name = "([^"]+)"', line):
                sink_names.append(match.group(1))
                found_name = True
                continue

            # Third priority: alsa.name (usually concise)
            if match := re.match(r'\s+alsa.name = "([^"]+)"', line):
                sink_names.append(match.group(1))
                found_name = True
                continue

            # Fallback: device.description but try to make it shorter by taking first part
            if match := re.match(r'\s+device.description = "([^"]+)"', line):
                # Take only first part if it contains spaces or hyphens
                name_parts = match.group(1).split(' ', 1)
                if len(name_parts) > 1:
                    sink_names.append(name_parts[0])
                else:
                    sink_names.append(match.group(1))
                found_name = True
                continue

        # Get volume information (taking front-left channel as reference)
        if "Volume:" in line and "front-left:" in line:
            if match := re.search(r'(\d+)%\s+/\s+([-\d\.]+|-inf)\s+dB', line):
                sink_volumes.append(int(match.group(1)))
                sink_dbs.append(float(match.group(2)) if match.group(2) != "-inf" else float("-inf"))
                continue

        # Get mute status
        if match := re.match(r'\s+Mute:\s+(\w+)', line):
            sink_muted.append(True if match.group(1) == "yes" else False)
            continue

    # Make sure we have all properties for each sink
    # If we have missing names (which could happen if we didn't find any of our preferred name properties)
    while len(sink_names) < len(sink_ids):
        sink_names.append(f"Sink {sink_ids[len(sink_names)]}")

    sinks = [Sink(*props) for props in
             zip(sink_ids, sink_names, sink_volumes, sink_muted, sink_dbs)]
    return sinks, default_sink_index


def change_sink(sinks: list[Sink], sink_index: int) -> None:
    """Set sink sink_index to default and move all inputs to sink sink_index.
    """
    sys.stderr.write(f"Changing to sink {sinks[sink_index]}...\n")

    # Set default sink using pactl
    run(["pactl", "set-default-sink", sinks[sink_index].id])

    # Get all sink inputs using pactl
    pactl_output = run(["pactl", "list", "sink-inputs"], stdout=PIPE)

    current_input_id = None

    for line in pactl_output.stdout.decode("utf8").splitlines():
        # Look for sink input sections
        if match := re.match(r"^Sink Input #(\d+)$", line):
            current_input_id = match.group(1)
            sys.stderr.write(f"Moving input {current_input_id}...\n")
            # Move this sink input to the selected sink
            run(["pactl", "move-sink-input", current_input_id, sinks[sink_index].id])


def mute_default_sink() -> None:
    """Mute the default sink"""
    sys.stderr.write("Muting default sink...\n")
    run(["pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle"])


def set_default_sink_volume(amount: str) -> None:
    """Set default sink volume to amount"""
    sys.stderr.write(f"Setting default sink volume {amount}...")
    run(["pactl", "set-sink-volume", "@DEFAULT_SINK@", amount])


def main() -> None:
    """Entry point to program"""
    sinks, default_sink_index = get_sinks()
    if not sinks:
        sys.stdout.write("No sinks\n")
        sys.stdout.write("\n")
        sys.stdout.flush()
        return

    button = os.environ.get("BLOCK_BUTTON")
    if button == "1":
        # left click: set sink
        next_default_index = (default_sink_index + 1) % len(sinks)
        change_sink(sinks, next_default_index)
    elif button == "2":
        # middle click: set to 100%
        set_default_sink_volume("0dB")
    elif button == "3":
        # right click: mute
        mute_default_sink()
    elif button == "4":
        # scroll up: raise volume
        set_default_sink_volume("+0.5dB")
    elif button == "5":
        # scroll down: lower volume
        set_default_sink_volume("-0.5dB")

    if button is not None:
        sinks, default_sink_index = get_sinks()

    muted = sinks[default_sink_index].muted
    volume = sinks[default_sink_index].volume
    db = sinks[default_sink_index].db

    if muted:
        symbol = AUDIO_MUTED_SYMBOL
    elif volume > AUDIO_MED_THRESHOLD:
        symbol = AUDIO_HIGH_SYMBOL
    elif volume > AUDIO_LOW_THRESHOLD:
        symbol = AUDIO_MED_SYMBOL
    else:
        symbol = AUDIO_LOW_SYMBOL

    name = sinks[default_sink_index].name

    if db == float("-inf"):
        volume_str = "  - dB"
    else:
        volume_str = f"{db:>+5.1f}dB"

    if volume > 100:
        volume_str = with_colour(volume_str, RED)

    out_str = f"{symbol} {name} {volume_str}"
    if muted:
        out_str = with_colour(out_str, YELLOW)

    sys.stdout.write(out_str)
    sys.stdout.write("\n")
    sys.stdout.flush()


if __name__ == '__main__':
    main()
