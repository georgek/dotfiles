#!/usr/bin/env python3.7

import sys

DISK_STATUS_FILE_NAME = "/tmp/disk_status"
DISK_USAGE_FILE_NAME = "/tmp/disk_usage"
# one of the devices might be called /dev/root, if it is, change it to this
ROOT_DISK_NAME = "sda"

BLOCKS = ("▁", "▂", "▃", "▄", "▅", "▆", "▇", "█")
COLOURS = (
    "#7F9F7F",           # green
    "#7F9F7F",           # green
    "#7F9F7F",           # green
    "#F0DFAF",           # yellow
    "#DFAF8F",           # orange
    "#CC9393",           # red
)

SSDS = (
    "sda",
)


def little_status(status):
    if status == "SSD":
        return '(s)'
    if status == "UP":
        return f'<span foreground="{COLOURS[-2]}">(u)</span>'
    elif status == "ASLEEP":
        return f'<span foreground="{COLOURS[0]}">(z)</span>'
    else:
        return f'<span foreground="{COLOURS[-1]}">(?)</span>'


def make_block(amount):
    blks = len(BLOCKS)-1
    cols = len(COLOURS)-1
    blockn = int(amount*blks)
    colourn = round(amount*cols)
    return f'<span foreground="{COLOURS[colourn]}">{BLOCKS[blockn]}</span>'


def main():
    try:
        with open(DISK_STATUS_FILE_NAME) as disk_status_file:
            disk_statuses = [line.split() for line in disk_status_file]
    except FileNotFoundError:
        disk_statuses = ()

    try:
        with open(DISK_USAGE_FILE_NAME) as disk_usage_file:
            items = (line.split() for line in disk_usage_file)
            disk_usage_dict = dict((item[0], item[4]) for item in items)
    except FileNotFoundError:
        disk_usage_dict = {}

    if "roo" in disk_usage_dict:
        disk_usage_dict[ROOT_DISK_NAME] = disk_usage_dict["roo"]
        del disk_usage_dict["roo"]

    info = []
    for disk, status, _ in disk_statuses:
        usage = disk_usage_dict.get(disk, "100%")
        usage = int(usage[:-1])/100
        block = make_block(usage)
        if disk in SSDS:
            status = "SSD"
        info.append(f"{block} {disk}{little_status(status)}")

    out = " ".join(info)
    sys.stdout.write(out)
    sys.stdout.write("\n")
    sys.stdout.flush()


if __name__ == '__main__':
    main()
