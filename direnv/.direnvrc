layout_virtualenv() {
  local venv_path="$1"
  source ${venv_path}/bin/activate
  # https://github.com/direnv/direnv/wiki/PS1
  unset PS1
}

layout_virtualenvwrapper() {
  local venv_path="${WORKON_HOME}/$1"
  layout_virtualenv $venv_path
}

use_localhist() {
    export LOCAL_HISTFILE=1
}

# from wiki: https://github.com/direnv/direnv/wiki/Python#poetry
layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1
    export VIRTUAL_ENV
}

# https://github.com/direnv/direnv/wiki/Python#hatch
layout_hatch() {
    if [[ ! -f "pyproject.toml" ]]; then
        if [[ ! -f "setup.py" ]]; then
            local tmpdir
            log_status "No pyproject.toml or setup.py found. Executing \`hatch new\` to create a new project."
            PROJECT_NAME=$(basename $PWD)
            tmpdir="$(mktemp -d)"
            hatch new $PROJECT_NAME $tmpdir > /dev/null
            cp -a --no-clobber $tmpdir/* . && rm -rf $tmpdir
        else
            # I haven't yet seen a case where migrating from an existing `setup.py` works, but I'm sure there are some.
            log_status "No pyproject.toml found. Executing \`hatch new --init\` to migrate from setuptools."
            hatch new --init || log_error "Failed to migrate from setuptools. Please fix and run \`hatch new --init\` manually." && return 1
        fi
    fi

    HATCH_ENV=${HATCH_ENV_ACTIVE:-default}
    # We need this to error out if the env doesn't exist in the pyproject.toml file.
    VIRTUAL_ENV=$(hatch env find $HATCH_ENV)

    if [[ ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`hatch env create\` to create one."
        hatch env create $HATCH_ENV
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export HATCH_ENV_ACTIVE=$HATCH_ENV
    export VIRTUAL_ENV
}

# Local Variables:
# mode: sh
# End:
